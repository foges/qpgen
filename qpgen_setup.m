function qpgen_setup(varargin)
%% Setup script for qpgen

% Parse input
opt_clb = any(strcmp(varargin, '-cuda_lib'));
opt_cbn = any(strcmp(varargin, '-cuda_bin'));

cuda_lib = '/usr/local/cuda/lib';
if opt_clb
  idx_lib = find(strcmp(varargin, '-cuda_lib')) + 1;
  cuda_lib = varargin{idx_lib};
end

cuda_bin = '/usr/local/cuda/bin';
if opt_cbn
  idx_bin = find(strcmp(varargin, '-cuda_bin')) + 1;
  cuda_bin = varargin{idx_bin};
end


unix('make clean');
unix(sprintf(['export PATH=$PATH:%s;' ...
              'export DYLD_LIBRARY_PATH=%s:$DYLD_LIBRARY_PATH;' ...
              'make qpgen_ln.o'], ...
             cuda_bin, cuda_lib));
try
  eval(sprintf(['mex -largeArrayDims -I. -L%s -lcudart -lcublas -lcusparse -output qpgen_init ' ...
                'LDFLAGS=''\\$LDFLAGS -stdlib=libstdc++ -Wl,-rpath,%s'' ' ...
                'CXXFLAGS=''\\$CXXFLAGS -stdlib=libstdc++'' ' ...
                'qpgen_init_mex.cpp qpgen.o qpgen_ln.o'], ...
               cuda_lib, cuda_lib))
  eval(sprintf(['mex -largeArrayDims -I. -L%s -lcudart -lcublas -lcusparse -output qpgen_run ' ...
                'LDFLAGS=''\\$LDFLAGS -stdlib=libstdc++ -Wl,-rpath,%s'' ' ...
                'CXXFLAGS=''\\$CXXFLAGS -stdlib=libstdc++'' ' ...
                'qpgen_run_mex.cpp qpgen.o qpgen_ln.o'], ...
               cuda_lib, cuda_lib))
catch
  fprintf('Linking to standard library failed, trying another.\n')
  eval(sprintf(['mex -largeArrayDims -I. -L%s -lcudart -lcublas -lcusparse -output qpgen_init ' ...
                'LDFLAGS=''\\$LDFLAGS -Wl,-rpath,%s'' ' ...
                'qpgen_init_mex.cpp qpgen.o qpgen_ln.o'], ...
               cuda_lib, cuda_lib))
  eval(sprintf(['mex -largeArrayDims -I. -L%s -lcudart -lcublas -lcusparse -output qpgen_run ' ...
                'LDFLAGS=''\\$LDFLAGS -Wl,-rpath,%s'' ' ...
                'qpgen_run_mex.cpp qpgen.o qpgen_ln.o'], ...
               cuda_lib, cuda_lib))
end

fprintf('Setup Successful.\n')

